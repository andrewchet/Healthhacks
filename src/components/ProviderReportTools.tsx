import React, { useState } from 'react';
import { View, Text, Pressable, Share, Modal, TextInput, ScrollView } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { PainLog, BODY_PARTS } from '../types/pain';
import { User } from '../types/auth';
import useAppStore from '../state/appStore';
import { generateDoctorReport } from '../utils/doctorExport';
import { cn } from '../utils/cn';
import AppModal from './AppModal';

interface ProviderReportToolsProps {
  painLogs: PainLog[];
  patient: User;
}

export default function ProviderReportTools({ painLogs, patient }: ProviderReportToolsProps) {
  const { isDarkMode } = useAppStore();
  const [voiceNoteModal, setVoiceNoteModal] = useState(false);
  const [visitNote, setVisitNote] = useState('');
  const [careNotes, setCareNotes] = useState('');

  const [modal, setModal] = useState<{ visible: boolean; title: string; message: string; onConfirm?: () => void; confirmText?: string; showCancel?: boolean }>({ visible: false, title: '', message: '' });
  const openModal = (title: string, message: string, opts?: { onConfirm?: () => void; confirmText?: string; showCancel?: boolean }) => setModal({ visible: true, title, message, onConfirm: opts?.onConfirm, confirmText: opts?.confirmText, showCancel: opts?.showCancel });
  const closeModal = () => setModal((m) => ({ ...m, visible: false }));

  const handleGenerateVisitSummary = async () => {
    if (painLogs.length === 0) {
      openModal('No Data', 'No pain logs available for this patient.', { showCancel: false });
      return;
    }

    try {
      const report = generateDoctorReport(painLogs);
      const bodyPartDisplayName = BODY_PARTS.find(
        part => part.id === report.summary.mostCommonBodyPart
      )?.displayName || report.summary.mostCommonBodyPart;

      const visitSummary = `CLINICAL VISIT SUMMARY\n${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()}\n\nPATIENT INFORMATION:\n• Name: ${patient.name}\n• Email: ${patient.email}\n• DOB: ${patient.dateOfBirth ? new Date(patient.dateOfBirth).toLocaleDateString() : 'Not provided'}\n\nCHIEF COMPLAINT:\n• Primary pain location: ${bodyPartDisplayName}\n• Average pain intensity: ${report.summary.averagePain}/10\n• Pain trend: ${report.summary.painTrend}\n\nPAIN HISTORY ANALYSIS:\n• Total documented episodes: ${report.summary.totalEntries}\n• Date range: ${report.summary.dateRange}\n• Predominant pain type: ${report.summary.mostCommonPainType}\n\nPATTERN ANALYSIS:\n${Object.entries(report.patterns.painByBodyPart)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 3)
  .map(([part, count]) => `• ${BODY_PARTS.find(p => p.id === part)?.displayName || part}: ${count} episodes`)
  .join('\n')}\n\nCLINICAL RECOMMENDATIONS:\n${report.recommendations.map(rec => `• ${rec}`).join('\n')}\n\nPROVIDER NOTES:\n${visitNote || '(No additional notes provided)'}\n\nCARE PLAN:\n${careNotes || '(Care plan to be developed)'}\n\n---\nGenerated by ReliefLog Provider Dashboard\nFor clinical use only - not for patient distribution`;

      await Share.share({
        message: visitSummary,
        title: `Visit Summary - ${patient.name}`,
      });
    } catch (error) {
      openModal('Error', 'Failed to generate visit summary.', { showCancel: false });
    }
  };

  const handleEHRExport = () => {
    openModal(
      'Export to EHR',
      'This would integrate with your Electronic Health Record system. Features available:\n\n• HL7 FHIR format export\n• Direct EHR API integration\n• Structured data mapping\n• Automated clinical coding',
      {
        showCancel: true,
        confirmText: 'Configure Integration',
        onConfirm: () => {
          closeModal();
          openModal('EHR Integration', 'EHR integration would be configured here with your specific system (Epic, Cerner, etc.)', { showCancel: false });
        }
      }
    );
  };

  const handleVoiceNote = () => {
    openModal(
      'Voice Recording',
      'Voice note functionality would include:\n\n• Medical-grade transcription\n• HIPAA-compliant storage\n• Voice-to-text with medical terminology\n• Integration with visit notes',
      {
        showCancel: true,
        confirmText: 'Start Recording',
        onConfirm: () => {
          closeModal();
          setVoiceNoteModal(true);
        }
      }
    );
  };

  const handleScheduleFollowUp = () => {
    openModal(
      'Schedule Follow-Up',
      'Integration with scheduling systems:\n\n• Calendar management\n• Automated reminders\n• Care coordination\n• Progress tracking alerts',
      {
        showCancel: true,
        confirmText: 'Open Scheduler',
        onConfirm: () => {
          closeModal();
          openModal('Scheduler', 'Would open integrated scheduling system', { showCancel: false });
        }
      }
    );
  };

  const handleSaveNotes = () => {
    // In a real app, this would save to the backend
    openModal('Notes Saved', 'Visit notes and care plan have been saved to the patient record.', { showCancel: false });
    setVoiceNoteModal(false);
  };

  return (
    <View className="space-y-4">
      {/* Visit Summary Generator */}
      <View className={cn(
        "p-4 rounded-xl",
        isDarkMode ? "bg-gray-800" : "bg-white"
      )}>
        <View className="flex-row items-center space-x-2 mb-4">
          <Ionicons 
            name="document-text" 
            size={20} 
            color={isDarkMode ? "#10B981" : "#059669"} 
          />
          <Text className={cn(
            "text-lg font-semibold",
            isDarkMode ? "text-white" : "text-gray-900"
          )}>
            Visit Documentation
          </Text>
        </View>

        <View className="space-y-3">
          <Pressable
            onPress={handleGenerateVisitSummary}
            className={cn(
              "flex-row items-center justify-between p-4 rounded-xl",
              isDarkMode ? "bg-blue-900/30" : "bg-blue-50"
            )}
          >
            <View className="flex-row items-center space-x-3">
              <Ionicons name="document" size={20} color={isDarkMode ? "#60A5FA" : "#3B82F6"} />
              <View>
                <Text className={cn(
                  "font-semibold",
                  isDarkMode ? "text-blue-300" : "text-blue-700"
                )}>
                  Generate Visit Summary
                </Text>
                <Text className={cn(
                  "text-sm",
                  isDarkMode ? "text-blue-200" : "text-blue-600"
                )}>
                  Comprehensive clinical report
                </Text>
              </View>
            </View>
            <Ionicons name="chevron-forward" size={20} color={isDarkMode ? "#60A5FA" : "#3B82F6"} />
          </Pressable>

          <Pressable
            onPress={handleEHRExport}
            className={cn(
              "flex-row items-center justify-between p-4 rounded-xl",
              isDarkMode ? "bg-emerald-900/30" : "bg-emerald-50"
            )}
          >
            <View className="flex-row items-center space-x-3">
              <Ionicons name="cloud-upload" size={20} color={isDarkMode ? "#10B981" : "#059669"} />
              <View>
                <Text className={cn(
                  "font-semibold",
                  isDarkMode ? "text-emerald-300" : "text-emerald-700"
                )}>
                  Export to EHR
                </Text>
                <Text className={cn(
                  "text-sm",
                  isDarkMode ? "text-emerald-200" : "text-emerald-600"
                )}>
                  Send to electronic health record
                </Text>
              </View>
            </View>
            <Ionicons name="chevron-forward" size={20} color={isDarkMode ? "#10B981" : "#059669"} />
          </Pressable>

          <Pressable
            onPress={handleVoiceNote}
            className={cn(
              "flex-row items-center justify-between p-4 rounded-xl",
              isDarkMode ? "bg-purple-900/30" : "bg-purple-50"
            )}
          >
            <View className="flex-row items-center space-x-3">
              <Ionicons name="mic" size={20} color={isDarkMode ? "#A78BFA" : "#8B5CF6"} />
              <View>
                <Text className={cn(
                  "font-semibold",
                  isDarkMode ? "text-purple-300" : "text-purple-700"
                )}>
                  Voice Notes
                </Text>
                <Text className={cn(
                  "text-sm",
                  isDarkMode ? "text-purple-200" : "text-purple-600"
                )}>
                  Dictate post-visit observations
                </Text>
              </View>
            </View>
            <Ionicons name="chevron-forward" size={20} color={isDarkMode ? "#A78BFA" : "#8B5CF6"} />
          </Pressable>
        </View>
      </View>

      {/* Care Management */}
      <View className={cn(
        "p-4 rounded-xl",
        isDarkMode ? "bg-gray-800" : "bg-white"
      )}>
        <View className="flex-row items-center space-x-2 mb-4">
          <Ionicons 
            name="medical" 
            size={20} 
            color={isDarkMode ? "#F59E0B" : "#D97706"} 
          />
          <Text className={cn(
            "text-lg font-semibold",
            isDarkMode ? "text-white" : "text-gray-900"
          )}>
            Care Management
          </Text>
        </View>

        <View className="space-y-3">
          <Pressable
            onPress={handleScheduleFollowUp}
            className={cn(
              "flex-row items-center justify-between p-4 rounded-xl",
              isDarkMode ? "bg-orange-900/30" : "bg-orange-50"
            )}
          >
            <View className="flex-row items-center space-x-3">
              <Ionicons name="calendar" size={20} color={isDarkMode ? "#FB923C" : "#EA580C"} />
              <View>
                <Text className={cn(
                  "font-semibold",
                  isDarkMode ? "text-orange-300" : "text-orange-700"
                )}>
                  Schedule Follow-Up
                </Text>
                <Text className={cn(
                  "text-sm",
                  isDarkMode ? "text-orange-200" : "text-orange-600"
                )}>
                  Book next appointment
                </Text>
              </View>
            </View>
            <Ionicons name="chevron-forward" size={20} color={isDarkMode ? "#FB923C" : "#EA580C"} />
          </Pressable>

          <Pressable
            onPress={() => setVoiceNoteModal(true)}
            className={cn(
              "flex-row items-center justify-between p-4 rounded-xl",
              isDarkMode ? "bg-gray-700" : "bg-gray-100"
            )}
          >
            <View className="flex-row items-center space-x-3">
              <Ionicons name="create" size={20} color={isDarkMode ? "#9CA3AF" : "#6B7280"} />
              <View>
                <Text className={cn(
                  "font-semibold",
                  isDarkMode ? "text-gray-300" : "text-gray-700"
                )}>
                  Add Clinical Notes
                </Text>
                <Text className={cn(
                  "text-sm",
                  isDarkMode ? "text-gray-400" : "text-gray-600"
                )}>
                  Document visit details
                </Text>
              </View>
            </View>
            <Ionicons name="chevron-forward" size={20} color={isDarkMode ? "#9CA3AF" : "#6B7280"} />
          </Pressable>
        </View>
      </View>

      {/* Voice Notes Modal */}
      <Modal
        visible={voiceNoteModal}
        animationType="slide"
        presentationStyle="pageSheet"
      >
        <View className={cn(
          "flex-1",
          isDarkMode ? "bg-gray-900" : "bg-white"
        )}>
          <View className={cn(
            "flex-row items-center justify-between p-4 border-b",
            isDarkMode ? "border-gray-700" : "border-gray-200"
          )}>
            <Text className={cn(
              "text-xl font-bold",
              isDarkMode ? "text-white" : "text-gray-900"
            )}>
              Clinical Notes
            </Text>
            <Pressable onPress={() => setVoiceNoteModal(false)}>
              <Ionicons name="close" size={24} color={isDarkMode ? "white" : "black"} />
            </Pressable>
          </View>

          <ScrollView className="flex-1 p-4">
            <View className="space-y-6">
              {/* Visit Notes */}
              <View>
                <Text className={cn(
                  "text-lg font-semibold mb-3",
                  isDarkMode ? "text-white" : "text-gray-900"
                )}>
                  Visit Notes
                </Text>
                <TextInput
                  value={visitNote}
                  onChangeText={setVisitNote}
                  placeholder="Document your clinical observations, examination findings, and visit details..."
                  placeholderTextColor={isDarkMode ? "#6B7280" : "#9CA3AF"}
                  className={cn(
                    "p-4 rounded-xl border-2 h-32",
                    isDarkMode 
                      ? "bg-gray-800 border-gray-700 text-white" 
                      : "bg-white border-gray-200 text-gray-900"
                  )}
                  multiline
                  textAlignVertical="top"
                />
              </View>

              {/* Care Plan */}
              <View>
                <Text className={cn(
                  "text-lg font-semibold mb-3",
                  isDarkMode ? "text-white" : "text-gray-900"
                )}>
                  Care Plan & Next Steps
                </Text>
                <TextInput
                  value={careNotes}
                  onChangeText={setCareNotes}
                  placeholder="Document treatment plan, medications, referrals, and follow-up instructions..."
                  placeholderTextColor={isDarkMode ? "#6B7280" : "#9CA3AF"}
                  className={cn(
                    "p-4 rounded-xl border-2 h-32",
                    isDarkMode 
                      ? "bg-gray-800 border-gray-700 text-white" 
                      : "bg-white border-gray-200 text-gray-900"
                  )}
                  multiline
                  textAlignVertical="top"
                />
              </View>

              {/* Voice Recording Placeholder */}
              <View className={cn(
                "p-4 rounded-xl border-2 border-dashed",
                isDarkMode ? "border-gray-600 bg-gray-800" : "border-gray-300 bg-gray-50"
              )}>
                <View className="items-center space-y-3">
                  <Ionicons 
                    name="mic-outline" 
                    size={32} 
                    color={isDarkMode ? "#9CA3AF" : "#6B7280"} 
                  />
                  <Text className={cn(
                    "text-center",
                    isDarkMode ? "text-gray-400" : "text-gray-600"
                  )}>
                    Voice-to-text transcription would be integrated here for hands-free note taking
                  </Text>
                  <Pressable className={cn(
                    "px-4 py-2 rounded-lg",
                    isDarkMode ? "bg-red-600" : "bg-red-500"
                  )}>
                    <Text className="text-white font-semibold">🎤 Start Recording</Text>
                  </Pressable>
                </View>
              </View>

              {/* Save Button */}
              <Pressable
                onPress={handleSaveNotes}
                className={cn(
                  "p-4 rounded-xl items-center",
                  isDarkMode ? "bg-emerald-600" : "bg-emerald-500"
                )}
              >
                <Text className="text-white text-lg font-semibold">Save Notes</Text>
              </Pressable>
            </View>
          </ScrollView>
        </View>
      </Modal>

      <AppModal
        visible={modal.visible}
        title={modal.title}
        message={modal.message}
        onClose={closeModal}
        onConfirm={modal.onConfirm}
        confirmText={modal.confirmText}
        showCancel={modal.showCancel ?? false}
      />
    </View>
  );
}
